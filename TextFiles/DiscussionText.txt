
************************************ Day -1 ***********************************************
An Application is comprises of three layer:

1. Presentation Layer 		:  through which client/end-user will intercat with our application
							can be build using Front-end/web technology like HTMl, AJAx, React,Angular
		BACK-END Development				
							
2. Business Layer/app 		: Retrieve data from presentation Layer ==> process according to business logic ==> send data to be stored by persistence layer

3. Persistence Layer/Data	:will accept/retrieve data from service layer ==> stores them to any database.


Eclipse IDE: is a smart tool to speed-up development of any application using Java Programming Language.

It has smart features like auto-complete the code, auto-generate prototype of code etc...

System : pre-defined class available in java to interact with any hardware resource of the system



package in java == any directory on our personal computer


Keyword : a special words [reserved word] in java which has specific meaning hence we/developer cannot use those word in our program as class-name,method-name, variable-name, 


***************************** Day -2 ******************************************************

Variables:

1. Local Variables: are the var declared within a block of code.
2. Instance Variables: are the var declared within class definition/body
3. Class/static Variable: are declared with static keyword
4. Reference Variables: is an instance of the class pointed by 


public class Test
{
	int aVar; non-static instance
	static int bVar; class-copy/static var
	
	method1(){int a}
	method2(int b){a not available}
	
	try{
		int x;
	}
	
	static 
	{
		int no1;
	}
}


ABC corporation wanted to automate Employee management system. for which they need to develop an application which stores details of each employee and keeps count of no of employee registered in the application


Data types: instructs JVM to allocate specific-amount of memory for each data-type

int x:  4byte
char choice: 1byte
long distance: 8 byte


8 datatype / primitive types

byte : 1byte;
short 1byte;
char 1byte
int 
long
float
double
boolean


char employeeName: 
to store sequential chars use String objects 


In OOP inheritance helps in achieving 

1. scalability : 

class A{ method1(){a}}

class AChild extends A{method1(){a-updated}}


WHY : It helps developing an application much similar like real-life object and implements better Modularity, Code Re-usability, Scalability, Data Hiding, Functionality accessibility.


Problem Statement:

Myzone organization is selling different kinds of products and has gain popularity within city. organization wanted expand their business by reaching out to more consumer online. Help them to create a class which can represent their productsin the application.company also declares discounts on different products during different seasons. Design a functionality to implement discout feature as well.

Product
{
	id,
	title,
	desc,
	regularPrice,
	discount
	=========================
	cons[arguments] // initialization process 
	// process data
	addProduct
	editProductDetails
	removeProducts
	getProductDetails
	========================
	actual business functionality
	calculateDiscountedPrice()
}

Code Re-usability : can be achieved in 2 different ways

1. To re-use piece of code logic : create it as method 
2. To re-use class itself : Inheritance



Method Syntax

specifier modifier return_type method_name(optional parameter)

Specifier : public ,private , protected , default
modifier : static, final, abstract, synchronized, native

Return-Type : void , any primitive datatype , any class, array


method_name can be any identifier followed naming convention rule


A developer wanted to build employee management system where we can create an employee object if we know only name of employee or if we know all details of an employee.


Best /Recommanded Programming Practice says:

1. Declare data as private
2. design getters/setters for all data of class
getters/setter : method for performing read/write operation to encapsulated data of the class.



Scope of 
1. class   : within-package, 
2. variable : local , instance-within class
3. method : within-class 


String s1= "hello"; literal ==> intern() ==> may/may-not create new object of string type
String s2=new String("hello"); ==>

using new keyword always take more time / performation



Command Line interface = Character user interface = we type /add is considered as string

"101" ==> 101


Ideally Command line arguments are used to pass JVM specific configuration parameter in real time application


Static : a modifier can be used with  class/var/method/block

static class : can be only an inner

static var   : all instance/object will share single copy of the var. It will retain the value modified by other objects too. 

static method : can be called without creating an object of the class using class_name.method_name

static block : is a block of code which will be executed prior to main method of the class





******************************* Day - 3 ****************************************************





Div : a logical division/partition on a web-page to make its content appear/ stand differently from other content of web-page. BLOCK LEVEL DIVISION

span : most-of the time can be used within div section as a child division to style it differently then other content within div section. INLINE-BLOCK DIVISION

SELECTORS: 
Basic selectors : element , class , id , universal[*]
Attribute		: CSS help you to style elements having similar attribute
Pseudo-selectors: CSS dynamic -selector 

as filter : : can filter content based on elements/tags

Element = Family :  paragraph, heading [1,2,3,4,5,6],div
Class   =  logical-grouping of same/different [group of Hetrogeneous-elements]
ID		= is a unique identification given to any element within group of [clas,elements]

Any-CONTENT : absolutely anthing presented on web-page


RICE
MUSLI
UTENSIL LIQUID
DETTOL
PARACETAMOL TABLETS


GROCERY				MEDICAL 	


<A HREF="" TARGET="">CONTENT</A>
HREF-VALUE=: ANY URL, ANY SECTION OF PAGE 
TARGET=


domain-space 




Garbage Collector Eligibility


1.   Object goes out of scope class/method/block{ } :marked -gc
2. Employee e1=new Employee();  100= becomes de-referenced hence available for garbage collection
	Employee e2=new Employee(); 200
	e1=e2
3. e2=null; becomes eligible for GC

GC : is a dameon thread will be executed infinitely with certain interval



.equals() : is pre-defined method used to compare two OBJECTS.
s1.equals(s2)

abc.equals(abc)
http://marketplace.eclipse.org/marketplace-client-intro?mpc_install=495


1. ObjectAid UML 


Customer
Address

Cardinality of Relationship 

Uni-directional / Bi-directional
Many to Many  for ? swiggy == One-To-Many & Many-To-One 

One To Many  for e-commerce
One To One  Pan, Aadhar, Passport

One To Many : 

Uni-directional : Student ==> Course
	One student enroll for multiple course []

Bi-Directional : Course ==> Multiple Student


Employee{}
Department {Employee manager;}

Library{Book books[]/ List<Book>, Set<Book>}
Book {}

toString(): pre-defined method of java.lang.Object class. It is used to represent/display Object's value. The method will be implicitly called when we pass an object in println method

By -default every object[excepti String] contains the value as :

fully_qualified_name_of_class @ hexa-string of hashcode. When we wanted to print DATA of The Class when an object is passed as an argument to println function

Amazon [Courier Service]

Aggregation: an object of one class will become property/attribute of another class
				Order { Product p;}

Association: an object of one class will be used [take it as input argument in any function] to execute any function and passed to it as argument.


MakeMyTrip ==> BookTicketfor BLR with indianAirLine ==> bookticket(customerdetails)



Customer ==> amazon ==> calls delivery(order) ==>


Everyday Min-ride must be served are : 8
on top of 8 rides we will calculate rewards


Inheritance : helps in reusing the code +  reducing redundency of code + Scalability [modify / add new functionality ]


1st Rule : Child class must carry similar constructor [parent-default/no args] child shoul also carry default const

Parent-argument constructor : child must have argument constructor[how many argument it should have]

In Any Programming Language: for Inheritance while creating an object of child class ==> it will invoke constructor for its parent class first ==> call constructor of child class







